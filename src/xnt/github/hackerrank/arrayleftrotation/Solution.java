package xnt.github.hackerrank.arrayleftrotation;

import java.util.LinkedList;
import java.util.Scanner;

/**
 * https://www.hackerrank.com/challenges/array-left-rotation/problem
 */
public class Solution {

    private static final Scanner scanner = new Scanner(System.in);

    /**
     * Performs a left rotation by removing the first element and inserting it at the end. A potential enhancement
     * would be to just use a cursor/pointer to the element from which we should begin iterating, then recreate or just
     * print the list by going through it from the beginning.
     * @param list The list/array
     * @param rotations Number of left rotations to perform
     */
    private static void rotate(LinkedList<Integer> list, int rotations) {
        for(int i = 0; i < rotations; i++) {
            list.add(list.remove());
        }
    }

    /**
     * Prints the list in the format N(1) N(2) ... N(n)
     * @param list the list to print
     */
    private static void print(LinkedList<Integer> list) {
        for(int element : list) {
            System.out.print(element + " ");
        }
    }

    public static void main(String[] args) {

        //<editor-fold desc="Autogenerated code...">
        String[] nd = scanner.nextLine().split(" ");

        int listLength = Integer.parseInt(nd[0]);

        int rotations = Integer.parseInt(nd[1]);

        LinkedList<Integer> list = new LinkedList<>();

        String[] aItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < listLength; i++) {
            int aItem = Integer.parseInt(aItems[i]);
            list.add(aItem);
        }
        scanner.close();

        //</editor-fold>

        rotate(list, rotations);
        print(list);
    }
}
