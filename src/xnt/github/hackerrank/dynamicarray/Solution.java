package xnt.github.hackerrank.dynamicarray;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

/**
 * https://www.hackerrank.com/challenges/dynamic-array/problem
 * Probably one of the coolest ones I've seen so far. Not complex at all, but the instructions are tricky
 */
public class Solution {

    // Complete the dynamicArray function below.
    static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
        List<List<Integer>> sequences = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            sequences.add(new ArrayList<>());
        }

        List<Integer> lastAnswers = new ArrayList<>();
        int lastAnswer = 0;

        for(List<Integer> query : queries) {
            int sequenceId = (query.get(1) ^ lastAnswer) % n;
            int operand = query.get(2);
            List<Integer> sequence = sequences.get(sequenceId);
            if(query.get(0) == 1) {
                sequence.add(operand);
            } else {
                lastAnswer = sequence.get(operand % sequence.size());
                lastAnswers.add(lastAnswer);
            }
        }

        return lastAnswers;
    }

    //<editor-fold desc="Autogenerated">
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nq = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(nq[0]);

        int q = Integer.parseInt(nq[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, q).forEach(i -> {
            try {
                queries.add(
                        Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = dynamicArray(n, queries);

        bufferedWriter.write(
                result.stream()
                        .map(Object::toString)
                        .collect(joining("\n"))
                        + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
    //</editor-fold>
}
