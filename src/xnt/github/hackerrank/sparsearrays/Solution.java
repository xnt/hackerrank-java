package xnt.github.hackerrank.sparsearrays;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Scanner;

/**
 * https://www.hackerrank.com/challenges/sparse-arrays
 */
public class Solution {

    /** Stores the string and their number of occurrences */
    private static final HashMap<String, Integer> _strings = new HashMap<>();
    /**
     * Adds a string to the {@link #_strings} Hash Map. If the string is already there, then it
     * increases the counter
     * @param string the string to add
     */
    private static void addString(String string) {
        int previousOccurrences = _strings.getOrDefault(string, 0);
        int occurrences = previousOccurrences + 1;
        _strings.put(string, occurrences);
    }

    /**
     * Returns the number of matching queries in {@link #_strings}
     * @param queries the queries to look for
     * @return an array matching queries' length with the number of occurrences per query
     */
    private static int[] getMatches(String[] queries) {
        int[] matches = new int[queries.length];
        for(int i = 0; i < matches.length; i++) {
            String query = queries[i];
            matches[i] = _strings.getOrDefault(query, 0);
        }

        return matches;
    }

    // Complete the matchingStrings function below.
    private static int[] matchingStrings(String[] strings, String[] queries) {
        for(String string : strings) {
            addString(string);
        }

        return getMatches(queries);
    }

    public static void main(String[] args) throws IOException {
        //<editor-fold desc="Autogenerated code...">
        Scanner scanner = new Scanner(System.in);
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int stringsCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] strings = new String[stringsCount];

        for (int i = 0; i < stringsCount; i++) {
            String stringsItem = scanner.nextLine();
            strings[i] = stringsItem;
        }

        int queriesCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        String[] queries = new String[queriesCount];

        for (int i = 0; i < queriesCount; i++) {
            String queriesItem = scanner.nextLine();
            queries[i] = queriesItem;
        }

        int[] res = matchingStrings(strings, queries);

        for (int i = 0; i < res.length; i++) {
            bufferedWriter.write(String.valueOf(res[i]));

            if (i != res.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
        //</editor-fold>

    }
}
